{"version":3,"sources":["Components/drake.jpg","Components/Example.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Example","scrollYProgress","useViewportScroll","constraintsRef","useTransform","useRef","className","div","ref","drag","dragConstraints","src","Drake","alt","App","useState","count","useEffect","document","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,mC,oLCgC5BC,MA5Bf,WAAmB,IACTC,EAAoBC,cAApBD,gBAEFE,GADQC,YAAaH,EAAiB,CAAC,EAAG,GAAI,CAAC,GAAK,IACnCI,iBAAO,OAC9B,OACE,yBAEEC,UAAU,iEACR,kBAAC,IAAOC,IAAR,CAAYC,IAAKL,EACjBM,MAAI,EACJC,gBAAiBP,EACjBG,UAAU,+CAER,yBAAKK,IAAKC,IAAOC,IAAI,UACrB,yBAAKP,UAAU,aAAf,uMAEE,yBAAKA,UAAU,SACb,0BAAMA,UAAU,8CAAhB,UACA,0BAAMA,UAAU,8CAAhB,QACA,0BAAMA,UAAU,8CAAhB,cCICQ,MArBf,WAAe,MAGaC,mBAAS,GAHtB,mBAGNC,EAHM,aAIeD,oBAAS,IAJxB,mBAUb,OAVa,UAMbE,qBAAU,WACRC,SAASC,MAASH,KAQlB,yBAAKV,UAAU,iCACb,kBAAC,EAAD,QCVcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFT,SAASU,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1878ac0a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/drake.d9867a9b.jpg\";","import React, {useRef} from 'react'\r\nimport Drake from './drake.jpg'\r\nimport { motion, useViewportScroll, useTransform } from \"framer-motion\";\r\n\r\nfunction Example(){\r\n  const { scrollYProgress } = useViewportScroll();\r\n  const scale = useTransform(scrollYProgress, [0, 1], [0.2, 2]);\r\n  const constraintsRef = useRef(null)\r\n  return (\r\n    <div\r\n      \r\n      className=\"flex justify-center place-items-center h-screen bg-purple-100\">\r\n        <motion.div ref={constraintsRef}\r\n        drag\r\n        dragConstraints={constraintsRef}\r\n        className=\" overflow-hidden rounded-md w-4/5 shadow-md\" \r\n        >\r\n          <img src={Drake} alt=\"drake\"/> \r\n          <div className=\"px-6 py-4\">\r\n          Aute laborum labore anim consectetur pariatur ad consectetur voluptate enim veniam sit dolore eiusmod. Laborum reprehenderit sint voluptate cillum elit culpa ea officia dolor labore ea minim elit. \r\n            <div className=\"my-3 \">\r\n              <span className=\"mr-2 rounded-full py-2 px-4   bg-gray-300 \">#Music</span>\r\n              <span className=\"mr-2 rounded-full py-2 px-4   bg-gray-300 \">#Art</span>\r\n              <span className=\"mr-2 rounded-full py-2 px-4   bg-gray-300 \">#Tour</span>\r\n            </div>\r\n          </div>\r\n          \r\n        </motion.div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Example\r\n\r\n\r\n{/* <div className=\"wrapper\">\r\n      <motion.div\r\n        className=\"container\"\r\n        style={{\r\n          scale\r\n        }}\r\n      >\r\n        <motion.div\r\n          className=\"item\"\r\n          style={{\r\n            scaleY: scrollYProgress\r\n          }}\r\n        />\r\n      </motion.div>\r\n    </div> */}","import React, { useEffect, useState } from 'react'\nimport {animate, motion} from 'framer-motion'\nimport {useTransform} from 'framer'\nimport Example from './Components/Example'\n\n\nfunction App() {\n  // const [age, set]\n\n  const [count, setCount] = useState(0)\n  const [toggle, setToggle] = useState(false)\n\n  useEffect(()=>{\n    document.title  = count\n  })\n\n  return (\n    // <div className=\"flex justify-center flex-col place-items-center h-screen\">\n    //   <motion.h1 animate={{opacity:toggle? 4:0}}>{count}</motion.h1>\n    //   <button className=\"p-4 bg-blue-600 rounded\" onClick={()=>{setCount((val)=>setCount(val + 1));setToggle((val) => setToggle(!val) ) }}>Increment</button>\n    // </div>  \n    <div className=\"w-full h-screen bg-indigo-100\">\n      <Example />\n    </div>\n  );\n}\n\nexport default App;\n\n\n{/* <div className=\"flex flex-col justify-center place-items-center h-screen w-full\">\n      <p className=\" text-xl text-red-700 font-bolder p-8 border-2 border-red-500 \">KHLORIS MEDIAS</p>\n      <p className=\"text-sm font-extrabold\">Your favourite social media<span className=\"text-red-700 text-3xl\"> influencer</span></p>\n    </div> */}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}